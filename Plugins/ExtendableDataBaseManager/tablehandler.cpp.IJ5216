#include "tablehandler.h"

TableHandler::TableHandler(IDataBaseSourcePlugin *dataSource, QString tableName)
{
    this->dataSource = dataSource;
    this->tableName = tableName;

    dataBaseTypesNames.insert(QVariant::Int, "INTEGER");

    coreTableStruct.insert("id", QVariant::Int);

    CombineWholeTableStruct();

    if(tableName == "")
        isCreated = false;
    else
        CreateTable();
}

bool TableHandler::CreateTable()
{
    // Is name valid
    qDebug() << "Create new table" << tableName;
    if(tableName == NULL || tableName == "")
    {
        qDebug() << "Tree name is empty!";
        return false;
    }
    tableName = tableName.toLower();

    // Is DataSource set
    if(!dataSource)
    {
        qDebug() << "DBManager isnt set!";
        return false;
    }

    // Create query
    QString queryStr = QString("CREATE TABLE IF NOT EXISTS %1 (%2)")
            .arg(tableName)
            .arg(GetHeaderString(coreTableStruct));
    qDebug() << "Creating table" << queryStr;
    QSqlQuery query = dataSource->ExecuteQuery(queryStr);

    // Is table has right structure
//    if(!IsTableRightStructure(tableName))
//    {
//        qDebug() << "Table" << tableName << "has wrong structure";
//        return false;
//    }

    isCreated = true;
    return true;
}

bool TableHandler::SetRelation(QString relationName, TableStructMap fields)
{
    qDebug() << "SetRelation";
    if(relationName == "")
    {
        qDebug() << "Relation name is empty!";
        return false;
    }

    QString dataFields = GetHeaderString(fields, true);
    if(dataFields == "")
    {
        qDebug() << "Can't create relation!";
        return false;
    }

    relationName = relationName.toLower();
    QString queryStr = QString("CREATE TABLE IF NOT EXISTS r_%1_%2 (%3)")
            .arg(tableName)
            .arg(relationName)
            .arg(dataFields);
    QSqlQuery queryResult = dataSource->ExecuteQuery(queryStr);

    relationTableStructs.insert(relationName, fields);
    return true;
}

bool TableHandler::DeleteRelation(QString relationName)
{
    qDebug() << "DeleteRelation";
    QString queryStr = QString("DROP TABLE IF EXISTS  %1_%2")
            .arg(tableName)
            .arg(relationName);
    QSqlQuery queryResult = dataSource->ExecuteQuery(queryStr);
    relationTableStructs.remove(relationName);
    CombineWholeTableStruct();
    return true;
}

QList<IExtendableDataBaseManagerPlugin::TreeItemInfo> TableHandler::GetData()
{
    QString queryStr = "";
    queryStr = QString("select * from %1 ").arg(tableName);
    //left outer join on
    QStringList joinTables = relationTableStructs.keys();
    for(int i = 0; i < joinTables.count(); i++)
    {
        queryStr.append(QString("NATURAL LEFT JOIN r_%1_%2")
                        .arg(tableName)
                        .arg(joinTables[i]));
    }
    qDebug() << queryStr;
    QSqlQuery query = dataSource->ExecuteQuery(queryStr);
    QList<TreeItemInfo> taskTree;
    TreeItemInfo buf;
    qDebug() << "Read";
    while (query.next()) {
        buf.id = query.value(0).toInt();
        for(int i = 1; i < query.size(); ++i)
            qDebug() << query.value(i);
//        for(int i = 3; i < query.size(); i++)
//        {
//            buf.data.append(query.value(i));
//        }
//        taskTree.append(buf);
    }
    return QList<TreeItemInfo>();
}

int TableHandler::AddItem(TreeItemInfo item)
{
    qDebug() << "Add Task";

    QString queryStr = QString("INSERT INTO %1 (id) VALUES (NULL)").arg(tableName);
    QSqlQuery query = dataSource->ExecuteQuery(queryStr);
    int lastId = query.lastInsertId().toInt();

    QStringList joinTables = item.dataChunks.keys();
    for(int i = 0; i < joinTables.count(); i++)
    {
        QString valuesString = GetValuesString(relationTableStructs[joinTables[i]], lastId, item.dataChunks[joinTables[i]]);
        if(valuesString != "")
        {
            queryStr = "";
            queryStr.append(QString("INSERT INTO r_%1_%2 %3")
                            .arg(tableName)
                            .arg(joinTables[i])
                            .arg(valuesString)
                            );
            qDebug() << queryStr;
        }
        ++i;
    }



    //QStringList relationsNames = relationsMap[treeName];

    return lastId;
}

bool TableHandler::EditItem(TreeItemInfo item)
{
//    treeName = treeName.toLower();
//    QString queryStr = QString("update %1 set name='%3', parent=%4, position=%5 where id=%2")
//            .arg(treeName)
//            .arg(item.id)
//            .arg(item.parent)
//            .arg(item.position)
//            ;
//    qDebug() << "Edit Task" << queryStr;
//    QSqlQuery query = dataSource->ExecuteQuery(queryStr);
//    if(query.lastError().text() != "")
//    {
//        lastError = query.lastError().text();
//        return false;
//    }
//    return true;
}

bool TableHandler::DeleteItem(int id)
{
//    treeName = treeName.toLower();
//    QString queryStr = QString("delete from %1 where id=%2").arg(treeName).arg(id);
//    qDebug() << "Delete Task" << queryStr;
//    QSqlQuery query = dataSource->ExecuteQuery(queryStr);
//    if(query.lastError().text() != "")
//    {
//        lastError = query.lastError().text();
//        return false;
//    }
//    return true;
}

TableHandler::TableStructMap TableHandler::GetHeader()
{
    return wholeTableStruct;
}

QString TableHandler::GetHeaderString(TableStructMap &tableStruct, bool createRelation)
{
    QString structStr = "";
    TableStructMap::Iterator iterator = tableStruct.begin();
    for(int i = 0; i < tableStruct.count(); ++i)
    {
        QString typeNameString = dataBaseTypesNames.contains(iterator.value()) ? dataBaseTypesNames[iterator.value()] : QVariant::typeToName(iterator.value());
        structStr.append(QString("%1 %2").arg(iterator.key()).arg(typeNameString));
        if(i == 0)
        {
            QString idAppendix = createRelation ?
                        QString(" REFERENCES %1(id) ON DELETE CASCADE").arg(tableName) :
                        " PRIMARY KEY AUTOINCREMENT";
            structStr.append(idAppendix);
        }
        if(i != tableStruct.count()-1) structStr.append(",");
        ++iterator;
    }
    return structStr;
}

QString TableHandler::GetValuesString(TableStructMap &tableStruct, int id, QVector<QVariant> &itemData)
{
    if(tableStruct.count()-1 != itemData.count())
    {
        qDebug() << "Wrong size";
        return QString();
    }

    QString fieldNamesStr = "(";
    QString valuesStr = "(";
    TableStructMap::Iterator iterator = tableStruct.begin();
    for(int i = 0; i < tableStruct.count(); ++i)
    {
        fieldNamesStr.append( QString("%1").arg(iterator.key()) );
        if(i == 0)
        {
            valuesStr.append(id);
        }
        else
        {
            valuesStr.append(itemData[i-1].toString());
        }

        if(i != tableStruct.count()-1)
        {
            fieldNamesStr.append(",");
            valuesStr.append(",");
        }
        else
        {
            fieldNamesStr.append(")");
            valuesStr.append(")");
        }
        ++iterator;
    }
    return QString("%1 VALUES %2").arg(fieldNamesStr).arg(valuesStr);
}

bool TableHandler::IsTableExists(QString tableName)
{
    // BUG: Not work
    QString queryStr = QString("pragma table_info(%1)").arg(tableName);
    QSqlQuery query = dataSource->ExecuteQuery(queryStr);
    return query.size() > 0;
}

void TableHandler::CombineWholeTableStruct()
{
    wholeTableStruct.clear();
    wholeTableStruct.unite(coreTableStruct);

    QMap<QString, TableStructMap>::Iterator i = relationTableStructs.begin();
    while(i != relationTableStructs.end())
    {
        wholeTableStruct.unite(i.value());
        ++i;
    }
}

//bool TableHandler::IsTableRightStructure(QString tableName)
//{
//    QString queryStr = QString("pragma table_info(%1)").arg(tableName);
//    QSqlQuery query = dataSource->ExecuteQuery(queryStr);
//    QString name;
//    QVariant::Type type;

//    for(int i = 0; i < coreTableStruct.count(); i++)
//    {
//        if(!query.next())
//        {
//            qDebug() << "Too few records!";
//            return false;
//        }
//        qDebug() << query.value(0).toInt() << ": " << query.value(1).toString() << ": " << query.value(2).toString();
//        name = query.value(1).toString();
//        type = query.value(2).type();
//        if(coreTableStruct[i].name != name || coreTableStruct[i].type != type)
//        {
//            qDebug() << name << type << "cant exist in right table structure";
//            return false;
//        }
//    }
//    return true;
//}
